const db = require('../config/db');
const crypto = require('crypto');
const multer = require('multer');
const path = require('path');

// T·∫°o token ng·∫´u nhi√™n
const generateToken = () => {
  return crypto.randomBytes(32).toString('hex');
};

// C·∫•u h√¨nh multer cho upload ·∫£nh
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    // T·∫°o t√™n file unique: timestamp_randomstring.extension
    const uniqueSuffix = Date.now() + '_' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  }
});

const fileFilter = (req, file, cb) => {
  console.log('üìÑ File info:', {
    fieldname: file.fieldname,
    originalname: file.originalname,
    mimetype: file.mimetype,
    size: file.size
  });
  
  // Ch·ªâ cho ph√©p file ·∫£nh - th√™m nhi·ªÅu MIME types v√† extension check
  const allowedMimeTypes = [
    'image/jpeg',
    'image/jpg', 
    'image/png',
    'image/gif',
    'image/webp',
    'image/bmp',
    'image/svg+xml'
  ];
  
  const allowedExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp', '.svg'];
  const fileExtension = path.extname(file.originalname).toLowerCase();
  
  if (allowedMimeTypes.includes(file.mimetype) || allowedExtensions.includes(fileExtension)) {
    console.log('‚úÖ File accepted:', file.originalname);
    cb(null, true);
  } else {
    console.log('‚ùå File rejected:', file.mimetype, fileExtension);
    const error = new Error('Ch·ªâ ƒë∆∞·ª£c upload file ·∫£nh (jpg, png, gif, webp, bmp, svg)!');
    error.code = 'INVALID_FILE_TYPE';
    cb(error, false);
  }
};

const upload = multer({
  storage: storage,
  fileFilter: fileFilter,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB
  }
});

// ƒêƒÉng k√Ω
exports.register = async (req, res) => {
  try {
    const { name, phone, password } = req.body;

    // Validate input
    if (!name || !phone || !password) {
      return res.status(400).json({
        status: 'error',
        message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin (t√™n, s·ªë ƒëi·ªán tho·∫°i, m·∫≠t kh·∫©u)',
        data: {}
      });
    }

    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i
    const existingUser = await db.query('SELECT id FROM users WHERE phone = $1', [phone]);
    if (existingUser.rows.length > 0) {
      return res.status(400).json({
        status: 'error',
        message: 'S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω',
        data: {}
      });
    }

    // T·∫°o token ng·∫´u nhi√™n
    const token = generateToken();

    // Th√™m user m·ªõi v√†o database
    const query = `
      INSERT INTO users (name, phone, password, token)
      VALUES ($1, $2, $3, $4)
      RETURNING id, name, phone, token, created_at
    `;
    const result = await db.query(query, [name, phone, password, token]);

    return res.status(201).json({
      status: 'success',
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
      data: {
        user: result.rows[0]
      }
    });

  } catch (error) {
    console.error('L·ªói ƒëƒÉng k√Ω:', error);
    return res.status(500).json({
      status: 'error',
      message: 'L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i',
      data: {}
    });
  }
};

// ƒêƒÉng nh·∫≠p
exports.login = async (req, res) => {
  try {
    const { phone, password } = req.body;

    // Validate input
    if (!phone || !password) {
      return res.status(400).json({
        status: 'error',
        message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i v√† m·∫≠t kh·∫©u',
        data: {}
      });
    }

    // T√¨m user theo s·ªë ƒëi·ªán tho·∫°i
    const query = 'SELECT * FROM users WHERE phone = $1';
    const result = await db.query(query, [phone]);

    if (result.rows.length === 0) {
      return res.status(401).json({
        status: 'error',
        message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng t·ªìn t·∫°i',
        data: {}
      });
    }

    const user = result.rows[0];

    // Ki·ªÉm tra m·∫≠t kh·∫©u (trong th·ª±c t·∫ø n√™n d√πng bcrypt)
    if (user.password !== password) {
      return res.status(401).json({
        status: 'error',
        message: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng',
        data: {}
      });
    }

    // T·∫°o token m·ªõi n·∫øu ch∆∞a c√≥
    let token = user.token;
    if (!token) {
      token = generateToken();
      await db.query('UPDATE users SET token = $1 WHERE id = $2', [token, user.id]);
    }

    // Tr·∫£ v·ªÅ th√¥ng tin user (kh√¥ng bao g·ªìm m·∫≠t kh·∫©u)
    const userResponse = {
      id: user.id,
      name: user.name,
      phone: user.phone,
      token: token,
      created_at: user.created_at
    };

    return res.json({
      status: 'success',
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      data: {
        user: userResponse
      }
    });

  } catch (error) {
    console.error('L·ªói ƒëƒÉng nh·∫≠p:', error);
    return res.status(500).json({
      status: 'error',
      message: 'L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i',
      data: {}
    });
  }
};

// L·∫•y th√¥ng tin user t·ª´ token
exports.getProfile = async (req, res) => {
  try {
    const { token } = req.headers;

    if (!token) {
      return res.status(401).json({
        status: 'error',
        message: 'Vui l√≤ng cung c·∫•p token x√°c th·ª±c',
        data: {}
      });
    }

    const query = 'SELECT id, name, phone, token, image_url, created_at FROM users WHERE token = $1';
    const result = await db.query(query, [token]);

    if (result.rows.length === 0) {
      return res.status(401).json({
        status: 'error',
        message: 'Token kh√¥ng h·ª£p l·ªá',
        data: {}
      });
    }

    return res.json({
      status: 'success',
      message: 'L·∫•y th√¥ng tin th√†nh c√¥ng',
      data: {
        user: result.rows[0]
      }
    });

  } catch (error) {
    console.error('L·ªói l·∫•y th√¥ng tin:', error);
    return res.status(500).json({
      status: 'error',
      message: 'L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i',
      data: {}
    });
  }
};

// Middleware x·ª≠ l√Ω l·ªói multer
exports.handleMulterError = (err, req, res, next) => {
  if (err) {
    if (err.code === 'INVALID_FILE_TYPE') {
      return res.status(400).json({
        status: 'error',
        message: 'Ch·ªâ ƒë∆∞·ª£c upload file ·∫£nh (jpg, png, gif, etc.)',
        data: {}
      });
    }
    if (err.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({
        status: 'error',
        message: 'File qu√° l·ªõn. T·ªëi ƒëa 5MB',
        data: {}
      });
    }
    return res.status(400).json({
      status: 'error',
      message: err.message || 'L·ªói upload file',
      data: {}
    });
  }
  next();
};

// Upload ·∫£nh ƒë·∫°i di·ªán
exports.uploadAvatar = async (req, res) => {
  try {
    const { token } = req.headers;

    if (!token) {
      return res.status(401).json({
        status: 'error',
        message: 'Vui l√≤ng cung c·∫•p token x√°c th·ª±c',
        data: {}
      });
    }

    if (!req.file) {
      return res.status(400).json({
        status: 'error',
        message: 'Vui l√≤ng ch·ªçn file ·∫£nh',
        data: {}
      });
    }

    // Ki·ªÉm tra user t·ªìn t·∫°i
    const userQuery = 'SELECT id FROM users WHERE token = $1';
    const userResult = await db.query(userQuery, [token]);

    if (userResult.rows.length === 0) {
      return res.status(401).json({
        status: 'error',
        message: 'Token kh√¥ng h·ª£p l·ªá',
        data: {}
      });
    }

    const userId = userResult.rows[0].id;
    const imageUrl = `/uploads/${req.file.filename}`;

    // C·∫≠p nh·∫≠t image_url trong database
    const updateQuery = 'UPDATE users SET image_url = $1 WHERE id = $2 RETURNING id, name, phone, image_url';
    const updateResult = await db.query(updateQuery, [imageUrl, userId]);

    return res.json({
      status: 'success',
      message: 'Upload ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng',
      data: {
        user: updateResult.rows[0],
        imageUrl: imageUrl
      }
    });

  } catch (error) {
    console.error('L·ªói upload ·∫£nh:', error);
    return res.status(500).json({
      status: 'error',
      message: 'L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i',
      data: {}
    });
  }
};

// Export multer upload middleware
exports.uploadMiddleware = upload.single('avatar');
